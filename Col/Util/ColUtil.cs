using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LakiTool.Col.Util
{
    class ColUtil
    {
        public static string[] colDataFix(string[] colDataRaw)
        {
            List<string> colOut = new List<string>();
            List<short> colDataShorts = new List<short>();
            List<string> specialList = new List<string>();
            string[] colLine;
            int CMDindex = 0;
            string colCurCmd = ColCMDs.colCMDArray[CMDindex];
            foreach(string line in colDataRaw)
            {
                colLine = MISCUtils.ParseAsmbd(line);
                if (colLine[0] == ColCMDs.colCMDArray[8])
                {
                    specialList.Add(line);
                }
                for (int i = 1; i < colLine.Length; i++)
                {
                    if (char.IsDigit(colLine[i][0]) || (colLine[i][0] == '-' && colLine[i].Length > 1))
                    {
                        if (colLine[i].Length > 1)
                        {
                            if (!(char.IsDigit(colLine[i][1]) || (colLine[i][1] == 'x'))) continue;
                        }
                        colDataShorts.Add((short)MISCUtils.ParseInt(colLine[i]));
                    }
                    else break;
                }

            }
            ushort num = 0;
            short inc = 1;
            colOut.Add("#Generated by LakiTool");
            colOut.Add(colDataRaw[0]);
            for(int i = 0; i < colDataShorts.Count; i+=inc)
            {
                if(CMDindex == 0)
                {
                    //init
                    colOut.Add(getNameFromCmd(colDataShorts[i]));
                    CMDindex++;
                    continue;
                }
                if (CMDindex == 1)
                {
                    //vertexinit
                    num = (ushort)(colDataShorts[i] - 1);
                    colOut.Add(ColCMDs.colCMDArray[CMDindex] + " 0x" + num.ToString("X"));
                    CMDindex++;
                    continue;
                }
                if(CMDindex == 2)
                {
                    //vertex
                    inc = 3;
                    colOut.Add(ColCMDs.colCMDArray[CMDindex] + " " + colDataShorts[i].ToString() + ", " + colDataShorts[i+1].ToString() + ", " + colDataShorts[i+2].ToString());
                    if (num == 0) CMDindex++;
                    num--;
                    continue;
                }
                if (CMDindex == 3)
                {
                    //trisinit
                    inc = 2;
                    num = (ushort)(colDataShorts[i+1] - 1);
                    if (colDataShorts[i] == 0x41) CMDindex += 4;
                    else
                    {
                        colOut.Add(ColCMDs.colCMDArray[CMDindex] + " " + getNameFromCmd(colDataShorts[i]) + ", " + colDataShorts[i + 1].ToString());
                        if (colDataShorts[i] == 0x04 || colDataShorts[i] == 0x0E || colDataShorts[i] == 0x24 || colDataShorts[i] == 0x25 || colDataShorts[i] == 0x27 || colDataShorts[i] == 0x02C || colDataShorts[i] == 0x2D) CMDindex++;
                        CMDindex++;
                    }
                    continue;
                }
                if(CMDindex == 4)
                {
                    //tris
                    inc = 3;
                    colOut.Add(ColCMDs.colCMDArray[CMDindex] + " " + colDataShorts[i].ToString() + ", " + colDataShorts[i + 1].ToString() + ", " + colDataShorts[i + 2].ToString());
                    if (num == 0) CMDindex--;
                    num--;
                    continue;
                }
                if (CMDindex == 5)
                {
                    //tris with special param
                    inc = 4;
                    colOut.Add(ColCMDs.colCMDArray[CMDindex] + " " + colDataShorts[i].ToString() + ", " + colDataShorts[i + 1].ToString() + ", " + colDataShorts[i + 2].ToString() + ", 0x" + colDataShorts[i + 3].ToString("X"));
                    if (num == 0) CMDindex-=2;
                    num--;
                    continue;
                }
                if(CMDindex == 6)
                {
                    //endtris
                    inc = 1;
                    if (colDataShorts[i + 1] == 0x43) CMDindex++; //special objects
                    if (colDataShorts[i + 1] == 0x44) CMDindex+=3; //water box
                    if (colDataShorts[i + 1] == 0x42) CMDindex+=5; //end collision
                    continue;
                }
                if(CMDindex == 7)
                {
                    //special objects init
                    num = (ushort)(colDataShorts[i] - 1);
                    colOut.Add(ColCMDs.colCMDArray[CMDindex] + " 0x" + (num+1).ToString("X"));
                    CMDindex++;
                    continue;
                }
                if(CMDindex == 8)
                {
                    //special objects
                    colOut.AddRange(specialList);
                    CMDindex++;
                    continue;
                }
                if (CMDindex == 9)
                {
                    //water box init
                    inc = 1;
                    num = (ushort)(colDataShorts[i - 2] - 1);
                    colOut.Add(ColCMDs.colCMDArray[CMDindex] + " 0x" + (num+1).ToString("X"));
                    CMDindex++;
                    continue;
                }
                if (CMDindex == 10)
                {
                    //water box
                    inc = 6;
                    colOut.Add(ColCMDs.colCMDArray[CMDindex] + " " + colDataShorts[i + -2] + ", " + colDataShorts[i - 1] + ", " + colDataShorts[i + 0] + ", " + colDataShorts[i + 1] + ", " + colDataShorts[i + 2] + ", " + colDataShorts[i + 3]);
                    if (num == 0) { CMDindex++; i-=inc; }
                    num--;
                    continue;
                }
                if(CMDindex == 11)
                {
                    colOut.Add(ColCMDs.colCMDArray[CMDindex]);
                    break;
                }
            }
            return colOut.ToArray();
        }

        public static string getNameFromCmd(short cmd)
        {
            foreach (GSUtil val in ColConsts.ColConstVals)
            {
                if (val.value == cmd)
                {
                    return val.name;
                }
            }
            return null;
        }

        public static short getCmdFromName(string name)
        {
            foreach (GSUtil val in ColConsts.ColConstVals)
            {
                if (val.name == name)
                {
                    return val.value;
                }
            }
            return 0;
        }
    }
}
